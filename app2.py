import streamlit as st
import joblib
import pandas as pd
import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, rdMolDescriptors, Crippen, Lipinski
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import io
import base64
import requests
import os

# Configuration de la page
st.set_page_config(
    page_title="DILI Predictor - Toxicit√© H√©patique",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration GitHub Releases
GITHUB_REPO = "kym94/DILI-Prediction-App"
MODEL_VERSION = "v1.0"
MODEL_URL = f"https://github.com/{GITHUB_REPO}/releases/download/{MODEL_VERSION}/best_dili_model_20250826_002227.pkl"


@st.cache_resource
def download_model():
    """T√©l√©charge le mod√®le si n√©cessaire"""
    model_filename = "best_dili_model_20250826_002227.pkl"

    if not os.path.exists(model_filename):
        with st.spinner("Premier lancement : t√©l√©chargement du mod√®le (49.5 MB)..."):
            try:
                response = requests.get(MODEL_URL, timeout=300)  # 5 min timeout
                response.raise_for_status()

                with open(model_filename, 'wb') as f:
                    f.write(response.content)

                st.success("‚úÖ Mod√®le t√©l√©charg√© avec succ√®s!")
                return True
            except Exception as e:
                st.error(f"‚ùå Erreur t√©l√©chargement mod√®le: {e}")
                return False
    return True


# Chargement du mod√®le (mise en cache)
@st.cache_resource
def load_model():
    # S'assurer que le mod√®le est t√©l√©charg√©
    if not download_model():
        st.error("Impossible de t√©l√©charger le mod√®le")
        return None

    try:
        return joblib.load('best_dili_model_20250826_002227.pkl')
    except FileNotFoundError:
        st.error("Mod√®le non trouv√© apr√®s t√©l√©chargement.")
        return None
    except Exception as e:
        st.error(f"Erreur chargement mod√®le: {e}")
        return None


# Chargement de la chimioth√®que de pharmacop√©e (mise en cache)
@st.cache_data
def load_pharmacopee_database():
    try:
        df = pd.read_excel('molecules pharmacopee OOAS et proprites.xlsx')

        # Corriger la structure des donn√©es : remplir les cellules vides de 'Plante'
        # avec la derni√®re plante mentionn√©e (forward fill)
        df['Plante'] = df['Plante'].fillna(method='ffill')

        # Nettoyage des donn√©es
        df = df.dropna(subset=['Canonical SMILES'])  # Supprimer lignes sans SMILES
        df = df.reset_index(drop=True)

        return df
    except FileNotFoundError:
        st.error(
            "Chimioth√®que pharmacop√©e non trouv√©e. Assurez-vous que 'molecules pharmacopee OOAS et proprites.xlsx' est dans le r√©pertoire.")
        return None


def create_pharmacopee_visualizations(df):
    """Cr√©er des visualisations pour la base de donn√©es pharmacop√©e"""
    # Distribution des poids mol√©culaires
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))

    # 1. Distribution MW
    axes[0, 0].hist(df['MW'].dropna(), bins=30, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0, 0].set_title('Distribution des Poids Mol√©culaires')
    axes[0, 0].set_xlabel('MW (g/mol)')
    axes[0, 0].set_ylabel('Fr√©quence')
    axes[0, 0].axvline(500, color='red', linestyle='--', label='Limite Lipinski (500)')
    axes[0, 0].legend()

    # 2. LogP vs TPSA
    scatter = axes[0, 1].scatter(df['Consensus Log P'].dropna(), df['TPSA'].dropna(),
                                 alpha=0.6, c=df['MW'].dropna(), cmap='viridis')
    axes[0, 1].set_title('LogP vs TPSA (color√© par MW)')
    axes[0, 1].set_xlabel('Consensus Log P')
    axes[0, 1].set_ylabel('TPSA (√Ö¬≤)')
    plt.colorbar(scatter, ax=axes[0, 1], label='MW')

    # 3. Violations Lipinski
    lipinski_counts = df['Lipinski #violations'].value_counts().sort_index()
    axes[1, 0].bar(lipinski_counts.index, lipinski_counts.values, alpha=0.7, color='lightcoral')
    axes[1, 0].set_title('Violations de la R√®gle de Lipinski')
    axes[1, 0].set_xlabel('Nombre de violations')
    axes[1, 0].set_ylabel('Nombre de mol√©cules')

    # 4. Absorption GI
    gi_counts = df['GI absorption'].value_counts()
    colors = ['lightgreen' if x == 'High' else 'orange' for x in gi_counts.index]
    axes[1, 1].pie(gi_counts.values, labels=gi_counts.index, autopct='%1.1f%%', colors=colors)
    axes[1, 1].set_title('Absorption Gastro-Intestinale')

    plt.tight_layout()
    return fig


def filter_pharmacopee_data(df, filters):
    """Filtrer la base de donn√©es selon les crit√®res"""
    filtered_df = df.copy()

    if filters['mw_range'][0] < filters['mw_range'][1]:
        filtered_df = filtered_df[
            (filtered_df['MW'] >= filters['mw_range'][0]) &
            (filtered_df['MW'] <= filters['mw_range'][1])
            ]

    if filters['logp_range'][0] < filters['logp_range'][1]:
        filtered_df = filtered_df[
            (filtered_df['Consensus Log P'] >= filters['logp_range'][0]) &
            (filtered_df['Consensus Log P'] <= filters['logp_range'][1])
            ]

    if filters['gi_absorption'] != 'Tous':
        filtered_df = filtered_df[filtered_df['GI absorption'] == filters['gi_absorption']]

    if filters['lipinski_violations'] is not None:
        filtered_df = filtered_df[filtered_df['Lipinski #violations'] <= filters['lipinski_violations']]

    if filters['plante_search']:
        filtered_df = filtered_df[
            filtered_df['Plante'].str.contains(filters['plante_search'], case=False, na=False)
        ]

    if filters['molecule_search']:
        filtered_df = filtered_df[
            filtered_df['Molecule'].str.contains(filters['molecule_search'], case=False, na=False)
        ]

    return filtered_df


# Liste exacte des 36 descripteurs s√©lectionn√©s par ElasticNet
SELECTED_DESCRIPTORS = [
    'SlogP_VSA8', 'NHOHCount', 'H-Bond_Donor_Count', 'fr_Ar_NH', 'BCUT2D_MRHI',
    'SMR_VSA6', 'PEOE_VSA10', 'SlogP_VSA10', 'Total_Atom_Stereo_Count', 'SMR_VSA4',
    'fr_piperdine', 'NumRadicalElectrons', 'fr_tetrazole', 'fr_nitro', 'PEOE_VSA9',
    'XLogP', 'Charge', 'fr_quatN', 'BCUT2D_MRLOW', 'fr_Ndealkylation2',
    'fr_Al_OH', 'fr_pyridine', 'fr_hdrzine', 'fr_HOCCN', 'qed',
    'EState_VSA3', 'NumUnspecifiedAtomStereoCenters', 'fr_Ndealkylation1', 'PEOE_VSA8',
    'fr_furan', 'PEOE_VSA3', 'FractionCSP3', 'VSA_EState5', 'fr_guanido',
    'fr_aniline', 'Kappa1'
]


def calculate_descriptors(smiles):
    """Calcule les descripteurs EXACTS utilis√©s pour l'entra√Ænement du mod√®le DILI"""
    try:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return None

        # Calculer automatiquement TOUS les descripteurs RDKit disponibles
        descriptors = {}

        # Parcourir tous les descripteurs disponibles dans RDKit
        for desc_name, desc_func in Descriptors.descList:
            try:
                descriptors[desc_name] = desc_func(mol)
            except:
                descriptors[desc_name] = 0.0

        # Ajouter quelques descripteurs personnalis√©s si n√©cessaire
        try:
            # Charge formelle totale de la mol√©cule
            descriptors['Charge'] = sum([atom.GetFormalCharge() for atom in mol.GetAtoms()])

            # Calculer le nombre total d'atomes st√©r√©og√©niques (incluant assign√©s et non-assign√©s)
            chiral_centers_all = Chem.FindMolChiralCenters(mol, includeUnassigned=True)
            descriptors['Total_Atom_Stereo_Count'] = len(chiral_centers_all)

            # Nombre d'atomes avec st√©r√©ochimie non sp√©cifi√©e
            chiral_centers_assigned = Chem.FindMolChiralCenters(mol, includeUnassigned=False)
            descriptors['NumUnspecifiedAtomStereoCenters'] = len(chiral_centers_all) - len(chiral_centers_assigned)

            # Renommer quelques descripteurs pour correspondre aux noms utilis√©s
            if 'NumHDonors' in descriptors:
                descriptors['H-Bond_Donor_Count'] = descriptors['NumHDonors']

        except Exception as e:
            print(f"Erreur descripteurs personnalis√©s: {e}")
            # Valeurs par d√©faut en cas d'erreur
            descriptors['Total_Atom_Stereo_Count'] = 0
            descriptors['NumUnspecifiedAtomStereoCenters'] = 0

        # S√©lectionner uniquement les 36 descripteurs utilis√©s par le mod√®le
        selected_desc = {}
        missing_descriptors = []

        for desc_name in SELECTED_DESCRIPTORS:
            if desc_name in descriptors:
                selected_desc[desc_name] = descriptors[desc_name]
            else:
                # Chercher des noms alternatifs courants
                found = False
                alternative_names = {
                    'H-Bond_Donor_Count': ['NumHDonors', 'HBD'],
                    'Total_Atom_Stereo_Count': ['NumAtomStereoCenters'],
                    'XLogP': ['MolLogP'],
                }

                if desc_name in alternative_names:
                    for alt_name in alternative_names[desc_name]:
                        if alt_name in descriptors:
                            selected_desc[desc_name] = descriptors[alt_name]
                            found = True
                            break

                if not found:
                    missing_descriptors.append(desc_name)
                    selected_desc[desc_name] = 0.0  # Valeur par d√©faut

        if missing_descriptors and len(missing_descriptors) < 5:  # Ne pas spammer si trop d'erreurs
            st.warning(f"Descripteurs manquants (remplac√©s par 0): {', '.join(missing_descriptors[:5])}")

        # Calculer les 1024 Morgan R2 fingerprints avec les noms exacts
        from rdkit.Chem import rdMolDescriptors
        morgan_fp = rdMolDescriptors.GetMorganFingerprintAsBitVect(mol, radius=2, nBits=1024)
        for i in range(1024):
            bit_name = f"Morgan_R2_1024_bit_{i:04d}"
            selected_desc[bit_name] = int(morgan_fp[i])

        return selected_desc

    except Exception as e:
        st.error(f"Erreur calcul descripteurs: {e}")
        return None


def predict_dili(model, features_dict):
    """Fait la pr√©diction DILI"""
    try:
        # Convertir en DataFrame avec ordre des colonnes attendu par le mod√®le
        df = pd.DataFrame([features_dict])

        # V√©rifier que toutes les features attendues sont pr√©sentes
        expected_features = 36 + 1024  # 36 descripteurs + 1024 Morgan
        if len(df.columns) != expected_features:
            st.warning(f"Nombre de features: {len(df.columns)}, attendu: {expected_features}")

        # Pr√©diction
        prediction = model.predict(df)[0]

        # Probabilit√©s si disponibles
        if hasattr(model, 'predict_proba'):
            probabilities = model.predict_proba(df)[0]
            confidence = max(probabilities)
        else:
            # Fallback avec decision_function pour SVM
            if hasattr(model, 'decision_function'):
                scores = model.decision_function(df)
                probabilities = [0.5 - scores[0] / 10, 0.5 + scores[0] / 10]  # Approximation
                probabilities = np.clip(probabilities, 0, 1)
            else:
                probabilities = [0.5, 0.5]
            confidence = max(probabilities)

        return prediction, probabilities, confidence

    except Exception as e:
        st.error(f"Erreur pr√©diction: {e}")
        return None, None, None


def draw_molecule(smiles, size=(300, 200)):
    """Dessine la structure 2D de la mol√©cule"""
    try:
        from rdkit.Chem import Draw
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return None
        img = Draw.MolToImage(mol, size=size)
        return img
    except ImportError:
        st.info("Visualisation mol√©culaire non disponible sur cette plateforme")
        return None
    except Exception:
        return None


def calculate_applicability_domain(features_dict, reference_ranges=None):
    """Calcule si la mol√©cule est dans le domaine d'applicabilit√© du mod√®le"""
    # Simplifi√© - en production, utiliser les statistiques du training set
    warnings = []

    # V√©rifications basiques
    if features_dict.get('XLogP', 0) > 10 or features_dict.get('XLogP', 0) < -5:
        warnings.append("LogP extr√™me (hors gamme typique)")

    if features_dict.get('H-Bond_Donor_Count', 0) > 20:
        warnings.append("Trop de donneurs de liaison H")

    return warnings


# CSS personnalis√©
def local_css():
    st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .prediction-positive {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
        padding: 1rem;
        margin: 1rem 0;
    }
    .prediction-negative {
        background-color: #e8f5e8;
        border-left: 5px solid #4caf50;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border-left: 5px solid #ffc107;
        padding: 1rem;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)


# Interface principale
def main():
    local_css()

    # Header
    st.markdown("<h1 class='main-header'>üß¨ TOXICITE HEPATIQUE - PHARMACOP√âE OUEST-AFRICAINE - MACHINE LEARNING</h1>",
                unsafe_allow_html=True)
    st.markdown(
        "<p style='text-align: center; font-size: 1.2rem; color: #666;'>Pr√©diction de toxicit√© h√©patique m√©dicamenteuse par intelligence artificielle</p>",
        unsafe_allow_html=True)

    # Sidebar avec informations mod√®le
    with st.sidebar:
        st.header("üìä Informations Mod√®le")
        st.markdown("""
        **Mod√®le principal:** Stacking Classifier  
        **Mod√®les de base:**
        ‚Ä¢ Random Forest
        ‚Ä¢ Support Vector Machine (lin√©aire & RBF)  
        ‚Ä¢ k-Nearest Neighbors

        **Meta-estimateur:** Logistic Regression

        **Features:** 36 descripteurs + 1024 Morgan R2  
        **F1-score externe:** 75.6%  
        **AUC externe:** 79.5%  
        **Dataset d'entra√Ænement:** 945 mol√©cules  
        **Validation externe:** 156 mol√©cules
        """)

        st.warning("‚ö†Ô∏è **Outil de recherche uniquement**\nPas √† usage clinique")

        # Afficher des exemples de SMILES
        st.subheader("üß™ Exemples SMILES")
        examples = {
            "√âthanol (Non-DILI)": "CCO",
            "Parac√©tamol (DILI)": "CC(=O)Nc1ccc(O)cc1",
            "Aspirine (DILI)": "CC(=O)Oc1ccccc1C(=O)O",
            "Caf√©ine (Non-DILI)": "CN1C=NC2=C1C(=O)N(C(=O)N2C)C"
        }

        for name, smiles in examples.items():
            if st.button(f"Charger {name.split('(')[0].strip()}", key=f"example_{name}"):
                st.session_state.example_smiles = smiles

    # Interface principale
    tab1, tab2, tab3, tab4 = st.tabs(["üî¨ Pr√©diction Unique", "üìä Analyse Batch", "üß™ Chimioth√®que", "üìñ √Ä propos"])

    with tab1:
        st.header("Pr√©diction pour une mol√©cule")

        # Input SMILES
        example_smiles = st.session_state.get('example_smiles', '')
        smiles_input = st.text_input(
            "Entrez le code SMILES:",
            value=example_smiles,
            placeholder="Exemple: CCO (√©thanol)",
            help="Le SMILES (Simplified Molecular Input Line Entry System) repr√©sente la structure chimique"
        )

        col1, col2 = st.columns([1, 1])

        with col1:
            predict_btn = st.button("üöÄ Pr√©dire", type="primary")

        with col2:
            if smiles_input:
                # Afficher la structure mol√©culaire
                mol_img = draw_molecule(smiles_input, size=(250, 200))
                if mol_img:
                    st.image(mol_img, caption="Structure 2D", width=250)

        if predict_btn and smiles_input:
            with st.spinner("Calcul des descripteurs et pr√©diction en cours..."):
                # Charger le mod√®le
                model = load_model()
                if model is None:
                    return

                # Calculer descripteurs
                features = calculate_descriptors(smiles_input)

                if features:
                    # Pr√©diction
                    pred, probs, conf = predict_dili(model, features)

                    if pred is not None:
                        # R√©sultats principaux
                        if pred == 1:
                            st.markdown("""
                            <div class='prediction-positive'>
                            <h3>üî¥ Pr√©diction: DILI POSITIF</h3>
                            <p>La mol√©cule est pr√©dite comme potentiellement h√©patotoxique</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class='prediction-negative'>
                            <h3>üü¢ Pr√©diction: Non-DILI</h3>
                            <p>La mol√©cule est pr√©dite comme non h√©patotoxique</p>
                            </div>
                            """, unsafe_allow_html=True)

                        # M√©triques d√©taill√©es
                        col1, col2, col3, col4 = st.columns(4)

                        with col1:
                            result_text = "DILI+" if pred == 1 else "DILI-"
                            st.metric("Classe", result_text)

                        with col2:
                            if probs is not None and len(probs) > 1:
                                dili_prob = probs[1] * 100
                                st.metric("Probabilit√© DILI", f"{dili_prob:.1f}%")

                        with col3:
                            st.metric("Confiance", f"{conf * 100:.1f}%")

                        with col4:
                            risk_level = "√âlev√©" if probs[1] > 0.7 else "Mod√©r√©" if probs[1] > 0.3 else "Faible"
                            st.metric("Niveau risque", risk_level)

                        # Graphique des probabilit√©s
                        if probs is not None and len(probs) > 1:
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

                            # Graphique en barres
                            labels = ['Non-DILI', 'DILI']
                            colors = ['#4caf50', '#f44336']
                            bars = ax1.bar(labels, probs, color=colors, alpha=0.7, edgecolor='black')
                            ax1.set_ylabel('Probabilit√©')
                            ax1.set_title('Distribution des Probabilit√©s')
                            ax1.set_ylim(0, 1)

                            # Ajouter les valeurs sur les barres
                            for bar, prob in zip(bars, probs):
                                height = bar.get_height()
                                ax1.text(bar.get_x() + bar.get_width() / 2., height + 0.01,
                                         f'{prob:.3f}', ha='center', va='bottom')

                            # Graphique en secteurs
                            ax2.pie(probs, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
                            ax2.set_title('R√©partition des Probabilit√©s')

                            plt.tight_layout()
                            st.pyplot(fig)

                        # V√©rification domaine d'applicabilit√©
                        warnings = calculate_applicability_domain(features)
                        if warnings:
                            st.markdown("""
                            <div class='warning-box'>
                            <h4>‚ö†Ô∏è Avertissements sur le domaine d'applicabilit√©:</h4>
                            """, unsafe_allow_html=True)
                            for warning in warnings:
                                st.write(f"‚Ä¢ {warning}")
                            st.markdown("</div>", unsafe_allow_html=True)

                        # Avertissements sur la confiance
                        if conf < 0.6:
                            st.error("‚ö†Ô∏è Pr√©diction peu fiable (confiance < 60%). Interpr√©ter avec prudence.")
                        elif conf < 0.7:
                            st.warning("‚ö†Ô∏è Pr√©diction mod√©r√©ment fiable (confiance < 70%).")

                        # D√©tails des descripteurs (expandeur)
                        with st.expander("üìä D√©tails des descripteurs calcul√©s"):
                            desc_df = pd.DataFrame([
                                {"Descripteur": k, "Valeur": v}
                                for k, v in features.items()
                                if k in SELECTED_DESCRIPTORS
                            ])
                            st.dataframe(desc_df, use_container_width=True)

                    else:
                        st.error("Erreur lors de la pr√©diction")
                else:
                    st.error("SMILES invalide ou erreur de calcul des descripteurs")

    with tab2:
        st.header("Analyse de fichiers batch")

        # Instructions
        st.info("""
        üìã **Formats support√©s:** Fichiers CSV et Excel (.xlsx)  
        üìä **Limite recommand√©e:** <1000 mol√©cules pour de bonnes performances  
        ‚è±Ô∏è **Temps de calcul:** ~1-2 secondes par mol√©cule

        **Colonnes SMILES accept√©es:** SMILES, Canonical SMILES, canonical_smiles, smiles, etc.
        """)

        uploaded_file = st.file_uploader("S√©lectionner fichier", type=['csv', 'xlsx'])

        if uploaded_file:
            try:
                # Chargement du fichier selon l'extension
                file_extension = uploaded_file.name.split('.')[-1].lower()

                if file_extension == 'csv':
                    df = pd.read_csv(uploaded_file)
                elif file_extension in ['xlsx', 'xls']:
                    df = pd.read_excel(uploaded_file)
                else:
                    st.error("Format de fichier non support√©")
                    return

                st.success(f"‚úÖ Fichier charg√©: {len(df)} lignes d√©tect√©es")

                # D√©tection flexible de la colonne SMILES
                possible_smiles_columns = [
                    'SMILES', 'Canonical SMILES', 'canonical_smiles', 'smiles',
                    'Canonical_SMILES', 'CANONICAL_SMILES', 'Smiles',
                    'canonical smiles', 'SMILES_canonical', 'mol_smiles'
                ]

                detected_smiles_col = None
                for col_name in possible_smiles_columns:
                    if col_name in df.columns:
                        detected_smiles_col = col_name
                        break

                if detected_smiles_col:
                    st.success(f"üéØ Colonne SMILES d√©tect√©e: '{detected_smiles_col}'")

                    # Option pour changer de colonne si l'utilisateur le souhaite
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        smiles_column = st.selectbox(
                            "Colonne SMILES √† utiliser:",
                            options=df.columns.tolist(),
                            index=df.columns.tolist().index(detected_smiles_col)
                        )
                    with col2:
                        if smiles_column != detected_smiles_col:
                            st.warning("‚ö†Ô∏è Colonne modifi√©e")

                else:
                    # Aucune colonne SMILES d√©tect√©e automatiquement
                    st.warning("‚ö†Ô∏è Aucune colonne SMILES d√©tect√©e automatiquement")
                    smiles_column = st.selectbox(
                        "S√©lectionner manuellement la colonne SMILES:",
                        options=df.columns.tolist(),
                        help="Choisissez la colonne contenant les codes SMILES"
                    )

                # V√©rification que la colonne s√©lectionn√©e existe et contient des donn√©es
                if smiles_column and smiles_column in df.columns:
                    # V√©rifier qu'il y a des donn√©es non-vides dans cette colonne
                    non_empty_smiles = df[smiles_column].dropna()
                    if len(non_empty_smiles) == 0:
                        st.error(f"‚ùå La colonne '{smiles_column}' ne contient aucune donn√©e SMILES valide")
                        return

                    st.write("**Aper√ßu des donn√©es:**")
                    preview_df = df.head(10).copy()
                    # Mettre en √©vidence la colonne SMILES s√©lectionn√©e
                    if len(preview_df.columns) > 10:
                        # Afficher prioritairement la colonne SMILES et quelques autres
                        priority_cols = [smiles_column]
                        other_cols = [col for col in df.columns if col != smiles_column][:9]
                        display_cols = priority_cols + other_cols
                        preview_df = preview_df[display_cols]

                    st.dataframe(preview_df)

                    # Statistiques sur les donn√©es SMILES
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Total mol√©cules", len(df))
                    with col2:
                        valid_smiles = len(non_empty_smiles)
                        st.metric("SMILES valides", valid_smiles)
                    with col3:
                        empty_smiles = len(df) - valid_smiles
                        st.metric("SMILES vides", empty_smiles)
                    with col4:
                        estimated_time = valid_smiles * 1.5  # secondes
                        st.metric("Temps estim√©", f"{estimated_time / 60:.1f} min")

                    if empty_smiles > 0:
                        st.warning(f"‚ö†Ô∏è {empty_smiles} lignes avec SMILES vides seront ignor√©es")

                    # Options avanc√©es
                    with st.expander("‚öôÔ∏è Options avanc√©es"):
                        col1, col2 = st.columns(2)
                        with col1:
                            skip_invalid = st.checkbox("Ignorer les SMILES invalides", value=True)
                            save_errors = st.checkbox("Sauvegarder les erreurs", value=True)
                        with col2:
                            batch_size = st.slider("Taille des lots", min_value=10, max_value=100, value=50)
                            show_progress = st.checkbox("Affichage d√©taill√©", value=True)

                    if st.button("üöÄ Lancer pr√©dictions batch", type="primary"):
                        model = load_model()
                        if model is None:
                            return

                        results = []
                        errors = []
                        progress_bar = st.progress(0)
                        status_text = st.empty()

                        # Filtrer les lignes avec SMILES non-vides
                        df_filtered = df.dropna(subset=[smiles_column]).copy()

                        for i, row in df_filtered.iterrows():
                            smiles = row[smiles_column]

                            if show_progress:
                                status_text.text(f'Mol√©cule {i + 1}/{len(df_filtered)}: {str(smiles)[:40]}...')

                            try:
                                # Calculer features et pr√©dire
                                features = calculate_descriptors(smiles)
                                if features:
                                    pred, probs, conf = predict_dili(model, features)
                                    prob_dili = probs[1] if probs is not None and len(probs) > 1 else 0.5
                                    result = 'DILI' if pred == 1 else 'Non-DILI' if pred == 0 else 'Erreur'

                                    # Ajouter toutes les colonnes du fichier original
                                    result_row = row.to_dict()
                                    result_row.update({
                                        'Prediction': result,
                                        'DILI_Probability': prob_dili,
                                        'Confidence': conf,
                                        'Risk_Level': ('√âlev√©' if prob_dili and prob_dili > 0.7 else
                                                       'Mod√©r√©' if prob_dili and prob_dili > 0.3 else
                                                       'Faible' if prob_dili else 'Inconnu')
                                    })
                                    results.append(result_row)

                                else:
                                    # SMILES invalide
                                    if skip_invalid:
                                        error_info = {
                                            'Index': i,
                                            'SMILES': smiles,
                                            'Erreur': 'SMILES invalide',
                                            **row.to_dict()
                                        }
                                        errors.append(error_info)
                                    else:
                                        result_row = row.to_dict()
                                        result_row.update({
                                            'Prediction': 'Erreur SMILES',
                                            'DILI_Probability': None,
                                            'Confidence': None,
                                            'Risk_Level': 'Inconnu'
                                        })
                                        results.append(result_row)

                            except Exception as e:
                                error_info = {
                                    'Index': i,
                                    'SMILES': smiles,
                                    'Erreur': str(e),
                                    **row.to_dict()
                                }
                                errors.append(error_info)

                                if not skip_invalid:
                                    result_row = row.to_dict()
                                    result_row.update({
                                        'Prediction': 'Erreur calcul',
                                        'DILI_Probability': None,
                                        'Confidence': None,
                                        'Risk_Level': 'Inconnu'
                                    })
                                    results.append(result_row)

                            progress_bar.progress((i + 1) / len(df_filtered))

                        # Afficher r√©sultats
                        status_text.text("‚úÖ Analyse termin√©e!")

                        if results:
                            results_df = pd.DataFrame(results)
                            st.success(f"üéâ Pr√©dictions termin√©es pour {len(results)} mol√©cules!")

                            # R√©organiser les colonnes pour mettre les r√©sultats en premier
                            result_columns = ['Prediction', 'DILI_Probability', 'Confidence', 'Risk_Level']
                            other_columns = [col for col in results_df.columns if col not in result_columns]
                            ordered_columns = result_columns + other_columns
                            results_df = results_df[ordered_columns]

                            st.dataframe(results_df, use_container_width=True)

                            # Statistiques rapides
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                n_dili = sum(1 for r in results if r['Prediction'] == 'DILI')
                                st.metric("DILI positifs", n_dili)
                            with col2:
                                n_non_dili = sum(1 for r in results if r['Prediction'] == 'Non-DILI')
                                st.metric("Non-DILI", n_non_dili)
                            with col3:
                                if errors:
                                    st.metric("Erreurs", len(errors))
                                else:
                                    st.metric("Erreurs", 0)
                            with col4:
                                valid_conf = [r['Confidence'] for r in results if r['Confidence'] is not None]
                                if valid_conf:
                                    avg_conf = np.mean(valid_conf)
                                    st.metric("Confiance moy.", f"{avg_conf:.1%}")
                                else:
                                    st.metric("Confiance moy.", "N/A")

                            # T√©l√©chargement des r√©sultats
                            csv = results_df.to_csv(index=False)
                            st.download_button(
                                label="üì• T√©l√©charger r√©sultats complets",
                                data=csv,
                                file_name=f"dili_predictions_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv"
                            )

                        # Afficher les erreurs si demand√©
                        if errors and save_errors:
                            st.subheader("üö® Erreurs d√©tect√©es")
                            errors_df = pd.DataFrame(errors)
                            st.dataframe(errors_df, use_container_width=True)

                            # T√©l√©chargement des erreurs
                            csv_errors = errors_df.to_csv(index=False)
                            st.download_button(
                                label="üì• T√©l√©charger rapport d'erreurs",
                                data=csv_errors,
                                file_name=f"dili_errors_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv"
                            )

                else:
                    st.error("‚ùå Aucune colonne SMILES s√©lectionn√©e ou colonne introuvable")
                    st.write("Colonnes disponibles:", list(df.columns))

            except Exception as e:
                st.error(f"Erreur lecture fichier: {e}")
                st.write("V√©rifiez que le fichier est bien format√© et accessible.")

    with tab3:
        st.header("Chimioth√®que - Pharmacop√©e Ouest-Africaine")

        # Information sur SwissADME
        st.info("""
        **‚ÑπÔ∏è Source des propri√©t√©s:** Les propri√©t√©s physicochimiques et ADMET des mol√©cules ont √©t√© calcul√©es 
        avec [SwissADME](http://www.swissadme.ch), un outil web gratuit d'√©valuation pharmacocin√©tique.

        **R√©f√©rence:** Daina, A., Michielin, O. & Zoete, V. SwissADME: a free web tool to evaluate pharmacokinetics, 
        drug-likeness and medicinal chemistry friendliness of small molecules. *Sci. Rep.* (2017) 7:42717.
        """)

        # Charger la chimioth√®que
        pharmacopee_df = load_pharmacopee_database()

        if pharmacopee_df is not None:
            # Statistiques g√©n√©rales
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Mol√©cules totales", len(pharmacopee_df))
            with col2:
                n_plantes = pharmacopee_df['Plante'].nunique()
                st.metric("Plantes distinctes", n_plantes)
            with col3:
                avg_mw = pharmacopee_df['MW'].mean()
                st.metric("MW moyen", f"{avg_mw:.1f} g/mol")
            with col4:
                high_gi = sum(pharmacopee_df['GI absorption'] == 'High')
                st.metric("Absorption GI √©lev√©e", f"{high_gi}/{len(pharmacopee_df)}")

            # Onglets secondaires pour la pharmacop√©e
            sub_tab1, sub_tab2, sub_tab3, sub_tab4 = st.tabs(
                ["üîç Exploration", "üìä Visualisations", "‚öóÔ∏è Pr√©dictions DILI", "üíæ Export"])

            with sub_tab1:
                st.subheader("Filtrage et recherche")

                # Filtres
                col1, col2 = st.columns(2)
                with col1:
                    plante_search = st.text_input("Recherche par plante:", placeholder="Ex: ABRUS")
                    molecule_search = st.text_input("Recherche par mol√©cule:", placeholder="Ex: Abruquinone")

                with col2:
                    mw_range = st.slider("Poids mol√©culaire (g/mol)",
                                         float(pharmacopee_df['MW'].min()),
                                         float(pharmacopee_df['MW'].max()),
                                         (float(pharmacopee_df['MW'].min()), float(pharmacopee_df['MW'].max())))

                    logp_options = pharmacopee_df['Consensus Log P'].dropna()
                    logp_range = st.slider("Log P consensuel",
                                           float(logp_options.min()),
                                           float(logp_options.max()),
                                           (float(logp_options.min()), float(logp_options.max())))

                col3, col4 = st.columns(2)
                with col3:
                    gi_options = ['Tous'] + list(pharmacopee_df['GI absorption'].unique())
                    gi_absorption = st.selectbox("Absorption GI:", gi_options)

                with col4:
                    lipinski_max = st.slider("Max violations Lipinski:", 0, 5, 5)

                # Appliquer les filtres
                filters = {
                    'mw_range': mw_range,
                    'logp_range': logp_range,
                    'gi_absorption': gi_absorption,
                    'lipinski_violations': lipinski_max,
                    'plante_search': plante_search,
                    'molecule_search': molecule_search
                }

                filtered_df = filter_pharmacopee_data(pharmacopee_df, filters)

                st.write(f"**{len(filtered_df)} mol√©cules trouv√©es**")

                # Affichage des r√©sultats
                if len(filtered_df) > 0:
                    # S√©lectionner les colonnes principales pour l'affichage
                    display_cols = ['Plante', 'Molecule', 'Formula', 'MW', 'Consensus Log P',
                                    'TPSA', 'GI absorption', 'Lipinski #violations', 'Bioavailability Score']

                    display_df = filtered_df[display_cols].copy()
                    display_df = display_df.round(2)

                    # Utiliser st.data_editor pour permettre la s√©lection
                    edited_df = st.data_editor(
                        display_df,
                        hide_index=True,
                        use_container_width=True,
                        num_rows="dynamic"
                    )

                    # D√©tails d'une mol√©cule s√©lectionn√©e
                    selected_idx = st.selectbox("S√©lectionner une mol√©cule pour d√©tails:",
                                                range(len(filtered_df)),
                                                format_func=lambda
                                                    x: f"{filtered_df.iloc[x]['Molecule']} ({filtered_df.iloc[x]['Plante']})")

                    if selected_idx is not None:
                        mol_info = filtered_df.iloc[selected_idx]

                        col1, col2 = st.columns([1, 1])

                        with col1:
                            st.subheader(f"D√©tails - {mol_info['Molecule']}")
                            st.write(f"**Plante:** {mol_info['Plante']}")
                            st.write(f"**Formule:** {mol_info['Formula']}")
                            st.write(f"**SMILES:** {mol_info['Canonical SMILES']}")
                            st.write(f"**MW:** {mol_info['MW']:.2f} g/mol")
                            st.write(f"**Log P:** {mol_info['Consensus Log P']:.2f}")
                            st.write(f"**TPSA:** {mol_info['TPSA']:.2f} √Ö¬≤")

                        with col2:
                            # Afficher la structure mol√©culaire si possible
                            mol_img = draw_molecule(mol_info['Canonical SMILES'], size=(300, 200))
                            if mol_img:
                                st.image(mol_img, caption="Structure 2D")

                            # Propri√©t√©s ADMET
                            st.subheader("Propri√©t√©s ADMET")
                            st.write(f"**Absorption GI:** {mol_info['GI absorption']}")
                            st.write(f"**Perm√©abilit√© BBB:** {mol_info['BBB permeant']}")
                            st.write(f"**Substrat Pgp:** {mol_info['Pgp substrate']}")
                            st.write(f"**Score biodisponibilit√©:** {mol_info['Bioavailability Score']:.2f}")

            with sub_tab2:
                st.subheader("Visualisations des propri√©t√©s")

                # Graphiques de la pharmacop√©e
                fig = create_pharmacopee_visualizations(pharmacopee_df)
                st.pyplot(fig)

                # Graphiques interactifs suppl√©mentaires
                st.subheader("Analyse interactive")

                col1, col2 = st.columns(2)
                with col1:
                    x_axis = st.selectbox("Axe X:", ['MW', 'Consensus Log P', 'TPSA', 'Bioavailability Score'])
                with col2:
                    y_axis = st.selectbox("Axe Y:", ['TPSA', 'MW', 'Consensus Log P', 'Bioavailability Score'])

                if x_axis != y_axis:
                    fig_scatter, ax = plt.subplots(figsize=(10, 6))
                    scatter = ax.scatter(pharmacopee_df[x_axis].dropna(),
                                         pharmacopee_df[y_axis].dropna(),
                                         c=pharmacopee_df['Lipinski #violations'].dropna(),
                                         cmap='RdYlGn_r', alpha=0.6, s=50)
                    ax.set_xlabel(x_axis)
                    ax.set_ylabel(y_axis)
                    ax.set_title(f'{x_axis} vs {y_axis} (color√© par violations Lipinski)')
                    plt.colorbar(scatter, label='Violations Lipinski')
                    st.pyplot(fig_scatter)

            with sub_tab3:
                st.subheader("Pr√©dictions DILI sur la pharmacop√©e")

                st.info("S√©lectionnez des mol√©cules de la pharmacop√©e pour pr√©dire leur toxicit√© h√©patique")

                # Options de s√©lection
                selection_mode = st.radio("Mode de s√©lection:", ["Mol√©cules individuelles", "Toute la base"])

                if selection_mode == "Mol√©cules individuelles":
                    # S√©lection multiple
                    selected_molecules = st.multiselect(
                        "S√©lectionner mol√©cules:",
                        options=range(len(pharmacopee_df)),
                        format_func=lambda
                            x: f"{pharmacopee_df.iloc[x]['Molecule']} ({pharmacopee_df.iloc[x]['Plante']})",
                        max_selections=20  # Limiter pour √©viter surcharge
                    )

                    if selected_molecules and st.button("Pr√©dire DILI pour s√©lection", type="primary"):
                        model = load_model()
                        if model:
                            results = []
                            progress_bar = st.progress(0)

                            for i, idx in enumerate(selected_molecules):
                                mol_info = pharmacopee_df.iloc[idx]
                                smiles = mol_info['Canonical SMILES']

                                # Calculer features et pr√©dire
                                features = calculate_descriptors(smiles)
                                if features:
                                    pred, probs, conf = predict_dili(model, features)
                                    prob_dili = probs[1] if probs is not None and len(probs) > 1 else 0.5
                                else:
                                    pred, prob_dili, conf = None, None, None

                                results.append({
                                    'Plante': mol_info['Plante'],
                                    'Molecule': mol_info['Molecule'],
                                    'SMILES': smiles,
                                    'MW': mol_info['MW'],
                                    'Prediction_DILI': 'DILI' if pred == 1 else 'Non-DILI' if pred == 0 else 'Erreur',
                                    'Probabilite_DILI': prob_dili,
                                    'Confiance': conf,
                                    'GI_absorption': mol_info['GI absorption'],
                                    'Bioavailability_Score': mol_info['Bioavailability Score']
                                })

                                progress_bar.progress((i + 1) / len(selected_molecules))

                            results_df = pd.DataFrame(results)
                            st.dataframe(results_df, use_container_width=True)

                            # Statistiques rapides
                            n_dili = sum(1 for r in results if r['Prediction_DILI'] == 'DILI')
                            st.metric("Mol√©cules pr√©dites DILI+", f"{n_dili}/{len(results)}")

                            # T√©l√©chargement
                            csv = results_df.to_csv(index=False)
                            st.download_button(
                                "T√©l√©charger r√©sultats DILI",
                                csv,
                                f"pharmacopee_dili_predictions_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                "text/csv"
                            )

                elif selection_mode == "Toute la base":
                    st.warning(
                        f"Cela va traiter {len(pharmacopee_df)} mol√©cules (~{len(pharmacopee_df) * 1.5 / 60:.1f} minutes)")

                    if st.button("Pr√©dire DILI pour toute la pharmacop√©e", type="secondary"):
                        model = load_model()
                        if model:
                            st.write("Traitement en cours... Cela peut prendre plusieurs minutes.")

                            # Traitement par batch pour affichage progressif
                            batch_size = 10
                            all_results = []

                            progress_bar = st.progress(0)
                            status_text = st.empty()

                            for batch_start in range(0, len(pharmacopee_df), batch_size):
                                batch_end = min(batch_start + batch_size, len(pharmacopee_df))
                                batch_df = pharmacopee_df.iloc[batch_start:batch_end]

                                for i, (_, mol_info) in enumerate(batch_df.iterrows()):
                                    current_idx = batch_start + i
                                    status_text.text(
                                        f'Mol√©cule {current_idx + 1}/{len(pharmacopee_df)}: {mol_info["Molecule"]}')

                                    smiles = mol_info['Canonical SMILES']
                                    features = calculate_descriptors(smiles)

                                    if features:
                                        pred, probs, conf = predict_dili(model, features)
                                        prob_dili = probs[1] if probs is not None and len(probs) > 1 else 0.5
                                    else:
                                        pred, prob_dili, conf = None, None, None

                                    all_results.append({
                                        'Plante': mol_info['Plante'],
                                        'Molecule': mol_info['Molecule'],
                                        'MW': mol_info['MW'],
                                        'Prediction_DILI': 'DILI' if pred == 1 else 'Non-DILI' if pred == 0 else 'Erreur',
                                        'Probabilite_DILI': prob_dili,
                                        'Confiance': conf,
                                        'GI_absorption': mol_info['GI absorption']
                                    })

                                    progress_bar.progress((current_idx + 1) / len(pharmacopee_df))

                            # Afficher r√©sultats complets
                            results_df = pd.DataFrame(all_results)
                            st.success(f"Analyse termin√©e pour {len(results_df)} mol√©cules!")

                            # Statistiques
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                n_dili = sum(results_df['Prediction_DILI'] == 'DILI')
                                st.metric("Pr√©dictions DILI+", f"{n_dili}")
                            with col2:
                                n_non_dili = sum(results_df['Prediction_DILI'] == 'Non-DILI')
                                st.metric("Pr√©dictions DILI-", f"{n_non_dili}")
                            with col3:
                                avg_conf = results_df['Confiance'].dropna().mean()
                                st.metric("Confiance moyenne", f"{avg_conf:.1%}")

                            st.dataframe(results_df, use_container_width=True)

                            # T√©l√©chargement complet
                            csv = results_df.to_csv(index=False)
                            st.download_button(
                                "T√©l√©charger toutes les pr√©dictions DILI",
                                csv,
                                f"pharmacopee_complete_dili_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                "text/csv"
                            )

            with sub_tab4:
                st.subheader("Export et t√©l√©chargement")

                st.write("**Base de donn√©es compl√®te:**")
                st.write(f"Contient {len(pharmacopee_df)} mol√©cules avec {len(pharmacopee_df.columns)} propri√©t√©s")

                # Options d'export
                export_format = st.selectbox("Format d'export:", ["CSV", "Excel", "JSON"])

                if export_format == "CSV":
                    csv_data = pharmacopee_df.to_csv(index=False)
                    st.download_button(
                        "T√©l√©charger base compl√®te (CSV)",
                        csv_data,
                        f"pharmacopee_ouest_africaine_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
                        "text/csv"
                    )

                elif export_format == "Excel":
                    # Cr√©er fichier Excel en m√©moire
                    from io import BytesIO
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        pharmacopee_df.to_excel(writer, sheet_name='Molecules', index=False)

                        # Statistiques sur un autre onglet
                        stats_data = {
                            'Propri√©t√©': ['Nombre total mol√©cules', 'Nombre plantes', 'MW moyen', 'MW m√©dian',
                                          'LogP moyen', 'TPSA moyen', 'GI absorption haute',
                                          'Violations Lipinski moyennes'],
                            'Valeur': [len(pharmacopee_df), pharmacopee_df['Plante'].nunique(),
                                       pharmacopee_df['MW'].mean(), pharmacopee_df['MW'].median(),
                                       pharmacopee_df['Consensus Log P'].mean(), pharmacopee_df['TPSA'].mean(),
                                       sum(pharmacopee_df['GI absorption'] == 'High'),
                                       pharmacopee_df['Lipinski #violations'].mean()]
                        }
                        pd.DataFrame(stats_data).to_excel(writer, sheet_name='Statistiques', index=False)

                    st.download_button(
                        "T√©l√©charger base compl√®te (Excel)",
                        buffer.getvalue(),
                        f"pharmacopee_ouest_africaine_{pd.Timestamp.now().strftime('%Y%m%d')}.xlsx",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

                # S√©lection de colonnes pour export personnalis√©
                st.subheader("Export personnalis√©")
                selected_cols = st.multiselect(
                    "S√©lectionner colonnes √† exporter:",
                    options=pharmacopee_df.columns.tolist(),
                    default=['Plante', 'Molecule', 'Canonical SMILES', 'MW', 'Consensus Log P', 'TPSA']
                )

                if selected_cols:
                    custom_df = pharmacopee_df[selected_cols]
                    csv_custom = custom_df.to_csv(index=False)
                    st.download_button(
                        "T√©l√©charger s√©lection personnalis√©e",
                        csv_custom,
                        f"pharmacopee_custom_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
                        "text/csv"
                    )
        else:
            st.error("Impossible de charger la base de donn√©es de pharmacop√©e.")

    with tab4:
        st.header("√Ä propos du mod√®le DILI")

        col1, col2 = st.columns([2, 1])

        with col1:
            st.markdown("""
            ### üß¨ Mod√®le de pr√©diction DILI (Drug-Induced Liver Injury)

            Ce mod√®le de machine learning pr√©dit la toxicit√© h√©patique potentielle des mol√©cules chimiques 
            bas√© sur leur structure mol√©culaire, d√©velopp√© dans le contexte de recherche sur la pharmacop√©e ouest-africaine.

            **üî¨ Caract√©ristiques techniques:**
            - **Algorithme:** Stacking Classifier (ensemble de mod√®les)
            - **Mod√®les de base:** Random Forest, SVM (lin√©aire/RBF), k-NN
            - **Meta-estimateur:** R√©gression logistique
            - **Features:** 36 descripteurs physicochimiques + 1024 Morgan fingerprints (R=2)
            - **Dataset:** 945 mol√©cules d'entra√Ænement
            - **Validation:** Nested cross-validation + validation externe rigoureuse

            **üìä Performance:**
            - F1-score externe: 75.6%
            - AUC-ROC externe: 79.5%
            - Sp√©cificit√©: 84.6%
            - Sensibilit√©: 76.9%

            **üåø Chimioth√®que pharmacop√©e:**
            - 191 mol√©cules de plantes m√©dicinales ouest-africaines
            - 50 propri√©t√©s physicochimiques et ADMET par mol√©cule
            - Propri√©t√©s calcul√©es avec SwissADME
            - Donn√©es issues de sources ethnopharmacologiques valid√©es

            **‚öóÔ∏è Descripteurs utilis√©s:**
            Les 36 descripteurs incluent des propri√©t√©s comme la lipophilicit√© (XLogP), 
            les compteurs de liaisons hydrog√®ne, les descripteurs de surface mol√©culaire, 
            et divers fragments fonctionnels.
            """)

        with col2:
            st.markdown("""
            ### üìö R√©f√©rences

            **M√©thodologie:**
            - Nested Cross-Validation
            - Strat√©gies comparatives
            - Validation externe rigoureuse
            - Consensus hyperparam√®tres

            **‚ö†Ô∏è Limitations:**
            - Outil de recherche uniquement
            - Dataset externe limit√© (156 mol.)
            - Domaine d'applicabilit√© √† consid√©rer
            - Performance modeste (75.6% F1)

            **üåç Contexte r√©gional:**
            D√©velopp√© pour la recherche sur les 
            substances bioactives de la 
            pharmacop√©e traditionnelle 
            ouest-africaine.

            ### üè• Avertissement m√©dical

            Ce mod√®le est destin√© exclusivement 
            √† la recherche acad√©mique et ne doit 
            **jamais** √™tre utilis√© pour des 
            d√©cisions cliniques ou th√©rapeutiques.
            """)

        # Informations techniques d√©taill√©es
        with st.expander("üîß D√©tails techniques"):
            st.markdown("""
            **Pipeline de preprocessing:**
            - StandardScaler sur les descripteurs physicochimiques
            - Passthrough sur les Morgan fingerprints (donn√©es binaires)
            - Gestion des valeurs manquantes (fillna=0)

            **Mod√®les ensembl√©s dans le Stacking:**
            - Random Forest (class_weight='balanced')
            - SVM Lin√©aire et RBF (class_weight='balanced')
            - k-Nearest Neighbors
            - Meta-estimateur: Logistic Regression

            **Hyperparam√®tres optimis√©s par GridSearchCV avec consensus robuste**

            **Base de donn√©es pharmacop√©e:**
            - Source: Collecte ethnopharmacologique syst√©matique
            - Validation: Structures chimiques v√©rifi√©es
            - Propri√©t√©s: Calcul√©es via outils ch√©moinformatiques
            - Couverture: Plantes m√©dicinales CEDEAO
            """)

        # Contact/Support
        st.markdown("""
        ---
        **üîß Support technique:** Pour questions ou probl√®mes techniques  
        **üìñ Documentation:** Voir rapport d√©taill√© pour m√©thodologie compl√®te  
        **üåø Base pharmacop√©e:** 191 mol√©cules de plantes ouest-africaines  
        **üìÑ Version:** 1.0 (Ao√ªt 2025)  
        **üéØ Contexte:** Recherche pharmacop√©e ouest-africaine - OOAS
        """)


if __name__ == "__main__":
    main()